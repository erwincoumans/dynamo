This is Info file DLdoc.info, produced by Makeinfo version 1.68 from
the input file DLdoc.texi.


File: DLdoc.info,  Node: Line,  Next: Line segment,  Prev: Curve,  Up: Curves

Line
----

The line curve class provides a curve specification for straight lines
(without restrictions on the domain). Here is its API:

     class DL_line : public DL_curve {
       void assign(DL_line*);
       void init(DL_geo*, DL_point*, DL_vector*);
       void set_minparam(DL_Scalar);
       void set_maxparam(DL_Scalar);
     
            DL_line();
            ~DL_line();
     }

`void DL_line::assign(DL_line *l)'
     This method assigns line `l' to this line.

`void DL_line::init(DL_geo *g, DL_point *p, DL_vector *l)'
     This method initializes the curve. The geo associated with it, is
     provided in reference `g', and the line is the line through point
     `p', and with direction vector `l'.

`void DL_line::set_minparam(DL_Scalar m)'
`void DL_line::set_maxparam(DL_Scalar m)'
     These two methods allow setting the domain boundaries for the
     line. These are only used by the *line segment* specialization, but
     may be for example be useful when adding a method that provides a
     topology for the curve: only the piece of the line specified by the
     domain parameters can then be visualized.


File: DLdoc.info,  Node: Line segment,  Next: Circle,  Prev: Line,  Up: Curves

Line segment
------------

The line segment curve class is a specialization of the line curve. Its
initialization method takes different parameters, and the curve is only
defined for a limited domain.

     class DL_linesegment : public DL_line {
       void assign(DL_linesegment*);
       void init(DL_geo*, DL_point*, DL_point*);
     
            DL_linesegment();
            ~DL_linesegment();
     }

`void DL_linesegment::assign(DL_linesegment *l)'
     This method assigns line segment `l' to this line segment.

`void DL_linesegment::init(DL_geo *g, DL_point *p0, DL_point *p1)'
     This method initializes the line segment, and specifies its two
     end points as `p0' and `p1'.


File: DLdoc.info,  Node: Circle,  Next: B-spline segment,  Prev: Line segment,  Up: Curves

Circle
------

The circle curve class provides a curve definition for a circle. Its
domain delimiters are specified at zero and two pi (for ease of for
example visualization), but any curve-parameter is considered valid and
with the curve domain.

     class DL_circle : public DL_curve {
       void assign(DL_circle*);
       void init(DL_geo*, DL_point*, DL_Scalar, DL_vector*);
     
            DL_circle();
            ~DL_circle();
     }

`void DL_circle::assign(DL_circle *c)'
     This method assigns circle `c' to this circle.

`void DL_circle::init(DL_geo *g, DL_point *p, DL_Scalar r, DL_vector *n)'
     This method initializes the circle. The circle has point `p' as its
     center. It has radius `r', and the plane it lies in had normal `n'.


File: DLdoc.info,  Node: B-spline segment,  Next: B-spline,  Prev: Circle,  Up: Curves

B-spline segment
----------------

The B-spline segment curve class provides cubic B-splines with exactly
four control points. It is designed for use by the B-spline class, so it
also has parameters `t' and `dt' which model the start and the duration
of the interval within the larger B-spline's parameter space.

     class DL_bsplinesegment : public DL_curve {
       void assign(DL_bsplinesegment*)
       void init(DL_geo*,DL_point*,DL_point*,DL_point*,DL_point*);
       void update_control_point(int,DL_point*);
       boolean deriv2(DL_Scalar,DL_vector*);
       void set_interval(DL_Scalar,DL_Scalar);
       DL_Scalar t();
       DL_Scalar dt();
     
             DL_bsplinesegment();
             ~DL_bsplinesegment();
     }

`void DL_bsplinesegment::assign(DL_bsplinesegment *b)'
     This method assigns B-spline segment `b' to this B-spline segment.

`void DL_bsplinesegment::init(DL_geo *g, DL_point *p0, DL_point *p1, DL_point *p2, DL_point *p3)'
     This method initializes the B-spline as a B-spline with geo `g'
     associated to it, and control points `p0, p1, p2' and `p3'.

`void DL_bsplinesegment::update_control_point(int i, DL_point *p)'
     This method assigns new coordinates `p' to the `i'-th control
     point.

`void DL_bsplinesegment::deriv2(DL_Scalar s, DL_vector *v)'
     This method returns the second derivative at curve parameter `s'
     in vector `v'.

`void DL_bsplinesegment::set_interval(DL_Scalar t, DL_Scalar dt)'
     This method sets the parameter space interval for which this
     B-spline segment is valid within any larger B-spline. It also sets
     the minimal domain parameter to `t' and the maximum domain
     parameter to `t'+`dt'.

`DL_Scalar DL_bsplinesegment::t()'
     This method returns the minimum curve parameter for this spline
     segment.

`DL_Scalar DL_bsplinesegment::dt()'
     This method returns the size of the curve parameter interval for
     this spline segment.


File: DLdoc.info,  Node: B-spline,  Next: C-spline segment,  Prev: B-spline segment,  Up: Curves

B-spline
--------

The B-spline curve class allows you to specify B-splines with any number
(greater than one) control points. The spline consists of a series of
B-spline segments. The spline can be cyclic meaning that there is also a
spline segment between the last and the first control points specified.

     class DL_bspline : public DL_curve {
       void assign(DL_bspline*)
       void init(DL_geo*,DL_List*,boolean);
       void update_control_point(int,DL_point*);
       boolean deriv2(DL_Scalar,DL_vector*);
     
            DL_bspline();
            ~DL_bspline();
     }

`void DL_bspline::assign(DL_bspline *b)'
     This method assigns B-spline `b' to this B-spline.

`void DL_bspline::init(DL_geo *g, DL_List *p, boolean c)'
     This method initializes the B-spline with control points as listed
     in list `p', and with boolean `c' indicating if the B-spline has
     to be cyclic or not.

`void DL_bsplinesegment::update_control_point(int i, DL_point *p)'
     This method assigns new coordinates `p' to the `i'-th control
     point.

`void DL_bspline::deriv2(DL_Scalar s, DL_vector *v)'
     This method returns the second derivative at curve parameter `s'
     in vector `v'.


File: DLdoc.info,  Node: C-spline segment,  Next: C-spline,  Prev: B-spline,  Up: Curves

C-spline segment
----------------

The C-spline segment curve class provides cubic C-splines with exactly
four control points. It is designed for use by the C-spline class, so it
also has parameters `t' and `dt' which model the start and the duration
of the interval within the larger C-spline's parameter space.

     class DL_csplinesegment : public DL_curve {
       void assign(DL_csplinesegment*)
       void init(DL_geo*,DL_point*,DL_point*,DL_point*,DL_point*);
       void update_control_point(int,DL_point*);
       boolean deriv2(DL_Scalar,DL_vector*);
       void set_interval(DL_Scalar,DL_Scalar);
       DL_Scalar t();
       DL_Scalar dt();
     
             DL_csplinesegment();
             ~DL_csplinesegment();
     }

`void DL_csplinesegment::assign(DL_csplinesegment *b)'
     This method assigns C-spline segment `b' to this C-spline segment.

`void DL_csplinesegment::init(DL_geo *g, DL_point *p0, DL_point *p1, DL_point *p2, DL_point *p3)'
     This method initializes the C-spline as a C-spline with geo `g'
     associated to it, and control points `p0, p1, p2' and `p3'.

`void DL_csplinesegment::update_control_point(int i, DL_point *p)'
     This method assigns new coordinates `p' to the `i'-th control
     point.

`void DL_csplinesegment::deriv2(DL_Scalar s, DL_vector *v)'
     This method returns the second derivative at curve parameter `s'
     in vector `v'.

`void DL_csplinesegment::set_interval(DL_Scalar t, DL_Scalar dt)'
     This method sets the parameter space interval for which this
     C-spline segment is valid within any larger C-spline. It also sets
     the minimal domain parameter to `t' and the maximum domain
     parameter to `t'+`dt'.

`DL_Scalar DL_csplinesegment::t()'
     This method returns the minimum curve parameter for this spline
     segment.

`DL_Scalar DL_csplinesegment::dt()'
     This method returns the size of the curve parameter interval for
     this spline segment.


File: DLdoc.info,  Node: C-spline,  Prev: C-spline segment,  Up: Curves

C-spline
--------

The C-spline curve class allows you to specify C-splines with any number
(greater than one) control points. The spline consists of a series of
C-spline segments. The spline can be cyclic meaning that there is also a
spline segment between the last and the first control points specified.

     class DL_cspline : public DL_curve {
       void assign(DL_cspline*)
       void init(DL_geo*,DL_List*,boolean);
       boolean deriv2(DL_Scalar,DL_vector*);
     
            DL_cspline();
            ~DL_cspline();
     }

`void DL_cspline::assign(DL_cspline *b)'
     This method assigns C-spline `b' to this C-spline.

`void DL_cspline::init(DL_geo *g, DL_List *p, boolean c)'
     This method initializes the C-spline with control points as listed
     in list `p', and with boolean `c' indicating if the C-spline has
     to be cyclic or not.

`void DL_cspline::update_control_point(int i, DL_point *p)'
     This method assigns new coordinates `p' to the `i'-th control
     point.

`void DL_cspline::deriv2(DL_Scalar s, DL_vector *v)'
     This method returns the second derivative at curve parameter `s'
     in vector `v'.


File: DLdoc.info,  Node: Surfaces,  Next: Sensors,  Prev: Curves,  Up: Miscellaneous classes

Surfaces
========

The surface classes are used to model explicit surfaces: functions from
one surface parameter pair to 3-D points. These are the surfaces that
are use by the point-to-surface constraint (*note pts::.). With each
surface, a geo is associated: the surface is expressed in the local
coordinate system of that geo (or in world coordinates if the
geo-reference happens to be the `NULL' pointer). In case the geo is a
dyna, the point-to-surface constraint's reaction force is also applied
to this geo. The `DL_surface' class is the generic surface class which
presents the general explicit surface-API, while the other classes
discussed here are actual implementations of specific types of surfaces.

* Menu:

* Surface::      The generic surface class
* Flat surface:: The flat surface (plane) class
* Ellipsoid::    The ellipsoid surface class


File: DLdoc.info,  Node: Surface,  Next: Flat surface,  Up: Surfaces

Surface
-------

The generic explicit surface class provides the generic API for
surfaces. It should be considered an abstract class, and only the
surface specializations provide an initialization method.

     class DL_surface {
       void assign(DL_surface*);
       boolean pos(DL_Scalar,DL_Scalar,DL_point*);
       boolean deriv0(DL_Scalar,DL_Scalar,DL_vector*);
       boolean deriv1(DL_Scalar,DL_Scalar,DL_vector*);
       boolean indomain(DL_Scalar,DL_Scalar);
       boolean closeto(DL_point*,DL_Scalar*,DL_Scalar*);
     
       DL_geo* get_geo();
       DL_Scalar get_minparam0();
       DL_Scalar get_maxparam0();
       DL_Scalar get_minparam1();
       DL_Scalar get_maxparam1();
     
             DL_surface();
             ~DL_surface();
     }

`void DL_surface::assign(DL_surface *s)'
     This method assigns surface `s' to this surface

`boolean DL_surface::pos(DL_Scalar s, DL_Scalar t, DL_point *p)'
     This method assigns the position (in the local coordinate system
     of the geo associated with the surface) for surface parameter pair
     `(s,t)' to `p'. It returns if `(s,t)' is within the surface domain.

`boolean DL_surface::deriv0(DL_Scalar s, DL_Scalar t, DL_vector *d)'
     This method assigns the derivative in the first surface parameter
     (given in the local coordinate system of the geo associated with
     the surface) for surface parameter pair `(s,t)' to `d'. It returns
     if `(s,t)' is within the surface domain.

`boolean DL_surface::deriv1(DL_Scalar s, DL_Scalar t, DL_vector *d)'
     This method assigns the derivative in the second surface parameter
     (given in the local coordinate system of the geo associated with
     the surface) for surface parameter pair `(s,t)' to `d'. It returns
     if `(s,t)' is within the surface domain.

`boolean DL_surface::indomain(DL_Scalar s, DL_Scalar t)'
     This method returns whether surface parameter pair `(s,t)' is
     within the surface domain.

`boolean DL_surface::closeto(DL_point *p, DL_Scalar *s, DL_Scalar *t)'
     This method returns in `*s' and `*t' a surface parameter pair
     which is such that the distance between that point on the surface
     and point `p' (given in world coordinates) is minimal.

`DL_geo* DL_surface::get_geo()'
     This method returns a reference to the geo that is associated with
     this surface.

`DL_Scalar DL_surface::get_minparam0()'
`DL_Scalar DL_surface::get_maxparam0()'
`DL_Scalar DL_surface::get_minparam1()'
`DL_Scalar DL_surface::get_maxparam1()'
     These methods return the minimum and maximum values for the two
     surface parameters. These values determine the domain of the
     surface. Some surface specializations may offer methods that allow
     you to also change these values, but not all surface types may
     want to allow this.


File: DLdoc.info,  Node: Flat surface,  Next: Ellipsoid,  Prev: Surface,  Up: Surfaces

Flat surface (plane)
--------------------

The flat surface class provides a surface definition for a plane
(without restrictions on the domain). Here is its API:

     class DL_flatsurface : public DL_surface {
       void assign(DL_flatsurface*);
     
       void init(DL_geo*,DL_point*,DL_vector*);
       void init(DL_geo*,DL_point*,DL_vector*,DL_vector*);
     
       void set_minparam0(DL_Scalar);
       void set_maxparam0(DL_Scalar);
       void set_minparam1(DL_Scalar);
       void set_maxparam1(DL_Scalar);
     
            DL_flatsurface();
            ~DL_flatsurface();
     }

`void DL_flatsurface::assign(DL_flatsurface *f)'
     This method assigns flat surface `f' to this surface.

`void DL_flatsurface::init(DL_geo *g, DL_point *p, DL_vector *n)'
     This method initializes the plane as the plane in `g', through
     point `p' and with normal `n'.

`void DL_flatsurface::init(DL_geo *g, DL_point *p, DL_vector *v, DL_vector *w)'
     This method initializes the plane as the plane in `g', through
     point `p' and spanned by vectors `v' and `w' (this has as
     advantage above the other `init' method that there is more control
     over the directions governed by the surface parameters).

`void DL_flatsurface::set_minparam0(DL_Scalar m)'
`void DL_flatsurface::set_maxparam0(DL_Scalar m)'
`void DL_flatsurface::set_minparam1(DL_Scalar m)'
`void DL_flatsurface::set_maxparam1(DL_Scalar m)'
     These methods provide a means of setting the domain boundaries.
     These are not actually used by the surface itself, but might be
     used by for example a visualization routine which only visualizes
     part of the (infinite) surface.


File: DLdoc.info,  Node: Ellipsoid,  Prev: Flat surface,  Up: Surfaces

Ellipsoid
---------

The ellipsoid surface class provides an explicit surface definition for
an ellipsoid surface. Due to the explicit nature, there are two points
on the ellipsoid (at the tips of the second major axis) that have no
clearly defined derivative. So any point-to-surface constraint which
happens to visit either of these two points will fail.

     class DL_ellipsoid : public DL_surface {
       void assign(DL_ellipsoid*);
       void init(DL_geo*,DL_point*,DL_vector*,DL_vector*,DL_vector*);
     
            DL_ellipsoid();
            ~DL_ellipsoid();
     }

`void DL_ellipsoid::assign(DL_ellipsoid *e)'
     This method assigns ellipsoid `e' to this ellipsoid.

`void DL_ellipsoid::init(DL_geo *g, DL_point *c,'
`                       DL_vector *x, DL_vector *y, DL_vector *z)'
     This method initializes the ellipsoid. It is associates with geo
     `g', and has point `c' as its center. The three major axis are
     vectors `x, y' and `z'. The surface is defined as
     sin(s)x+cos(s)cos(t)y+sin(t)z for surface parameter pairs (s,t).


File: DLdoc.info,  Node: Sensors,  Next: Actuators,  Prev: Surfaces,  Up: Miscellaneous classes

Sensors
=======

The sensor class provides a uniform way to take measurements in the
simulated system (via the `sense' method). Each sensor provides one
scalar value as its sensor reading. Sensors are used by some of the
`controller' classes, which try to steer the system (though
`actuator's) in such a way that the sensor reading equals a given
reference signal.

Here is the sensor interface description:

     class DL_sensor {
     protected:
     public:
       virtual DL_Scalar sense();
     
            DL_sensor();
            ~DL_sensor();
     }

`DL_Scalar DL_sensor::sense()'
     This method lets the sensor take a measurement and returns the
     sensor reading.

* Menu:

* Sensor_dist_v:: A sensor measuring distance in a given direction
* Sensor_velo_v:: A sensor measuring velocity in a given direction
* Sensor_angle_v:: A sensor measuring the angle between two vectors along a given axis
* Sensor_avelo_v:: A sensor measuring angular velocity between two vectors along a given axis


File: DLdoc.info,  Node: Sensor_dist_v,  Next: Sensor_velo_v,  Up: Sensors

Sensor_dist_v
-------------

A sensor measuring distance in a given direction:

     class DL_sensor_dist_v: public DL_sensor {
       void init(DL_dyna*, DL_point*, DL_vector*, DL_geo*, DL_point*);
     
            DL_sensor_dist_v();
            ~DL_sensor_dist_v();
     
     }

`void DL_sensor_dist_v::init(DL_dyna *d, DL_point *pd, DL_vector *rd,'
`                            DL_geo *g, DL_point *pg)'
     This method initialises the sensor to measure the distance between
     point `pd' in `d', and point `pg' in `g', in direction `rd' in `d'.


File: DLdoc.info,  Node: Sensor_velo_v,  Next: Sensor_angle_v,  Prev: Sensor_dist_v,  Up: Sensors

Sensor_velo_v
-------------

A sensor measuring velocity in a given direction:

     class DL_sensor_velo_v: public DL_sensor {
       void init(DL_dyna*, DL_point*, DL_vector*, DL_geo*, DL_point*);
     
            DL_sensor_velo_v();
            ~DL_sensor_velo_v();
     
     }

`void DL_sensor_velo_v::init(DL_dyna *d, DL_point *pd, DL_vector *rd,'
`                            DL_geo *g, DL_point *pg)'
     This method initialises the sensor to measure the relative velocity
     between point `pd' in `d', and point `pg' in `g', in direction
     `rd' in `d'.


File: DLdoc.info,  Node: Sensor_angle_v,  Next: Sensor_avelo_v,  Prev: Sensor_velo_v,  Up: Sensors

Sensor_angle_v
--------------

A sensor measuring the angle between two vectors around an axis with a
given direction:

     class DL_sensor_angle_v: public DL_sensor {
       void init(DL_dyna*, DL_vector*, DL_vector*, DL_geo*, DL_vector*);
       void initw(DL_dyna*, DL_vector*, DL_vector*, DL_geo*, DL_vector*);
     
            DL_sensor_angle_v();
            ~DL_sensor_angle_v();
     
     }

`void DL_sensor_angle_v::init(DL_dyna *d, DL_vector *dd, DL_vector *rd,'
`                             DL_geo *g, DL_vector *dg);'
     This method initialises the sensor to measure the relative angle
     around the axis with direction `rd' in `d', between vectors `dd'
     in `d' and `dg' in `g'.

`void DL_sensor_angle_v::initw(DL_dyna *d, DL_vector *dd, DL_vector *rd,'
`                              DL_geo *g, DL_vector *dg);'
     This method does the same as the `init' method above, but now the
     three vectors are given in world coordinates (the method will
     convert them to local coordinates).


File: DLdoc.info,  Node: Sensor_avelo_v,  Prev: Sensor_angle_v,  Up: Sensors

Sensor_avelo_v
--------------

A sensor measuring angular velocity between two vectors around an axis
with a given direction:

     class DL_sensor_avelo_v: public DL_sensor {
       void init(DL_dyna*, DL_vector*, DL_vector*, DL_geo*, DL_vector*);
       void initw(DL_dyna*, DL_vector*, DL_vector*, DL_geo*, DL_vector*);
     
            DL_sensor_avelo_v();
            ~DL_sensor_avelo_v();
     
     }

`void DL_sensor_avelo_v::init(DL_dyna *d, DL_vector *dd, DL_vector *rd,'
`                             DL_geo *g, DL_vector *dg);'
     This method initialises the sensor to measure the relative angular
     velocity around the axis with direction `rd' in `d', between
     vectors `dd' in `d' and `dg' in `g'.

`void DL_sensor_avelo_v::initw(DL_dyna *d, DL_vector *dd, DL_vector *rd,'
`                              DL_geo *g, DL_vector *dg);'
     This method does the same as the `init' method above, but now the
     three vectors are given in world coordinates (the method will
     convert them to local coordinates).


File: DLdoc.info,  Node: Actuators,  Next: Controllers,  Prev: Sensors,  Up: Miscellaneous classes

Actuators
=========

The actuator class provides a uniform way to apply different forces,
torques and impulses in a simulated system (via the `apply' method).
Each actuator transforms one scalar value to an applied force, torque
or impulse and applies it. Sensors are used by some of the `controller'
classes, which try to steer the system though `actuator's in such a way
that certain `sensor' readings equal given reference signals.

In order to make it easy to visualise the calculated forces, torques and
impulses, the `actuator' class inherits from the `force_drawable' class.

Here is the actuator interface description:

     class DL_actuator: public DL_force_drawable {
     protected:
     public:
       virtual void apply(DL_Scalar);
     
       void set_max_actuator(DL_Scalar);
       DL_Scalar get_max_actuator();
     
            DL_actuator();
            ~DL_actuator();
     }

`void DL_actuator::apply(DL_Scalar a)'
     This method lets the actuator apply its forces, torques and/or
     impulses based on actuator value `a'.

`void DL_actuator::set_max_actuator(DL_Scalar m)'
     Using this method, a maximum actuator value can be given (no limit
     if the value is smaller or equal than zero). If a value larger
     than this value is provided in the `apply' method, it is replaced
     with the maximum. The default is no maximum (a value of 0).

`DL_Scalar DL_actuator::get_max_actuator()'
     This method returns the current maximum actuator value.

* Menu:

* Actuator_fv:: An actuator applying a force in a given direction
* Actuator_tv:: An actuator applying a torque in a given direction


File: DLdoc.info,  Node: Actuator_fv,  Next: Actuator_tv,  Up: Actuators

Actuator_fv
-----------

An actuator that applies a force in a given direction:

     class `DL_actuator_fv': public `DL_actuator' {
       void init(DL_dyna*, DL_point*, DL_vector*, DL_geo*, DL_point*);
     
            DL_actuator_fv();
            ~DL_actuator_fv();
     }

`void DL_actuator_fv::init(DL_dyna *d, DL_point *pd, DL_vector *rd,'
`                          DL_geo *g, DL_point *pg)'
     This method initialises the actuator. The `apply' method will
     calculate a force in the direction of `rd' in `d' with a magnitude
     of the scalar given as a parameter to the `apply' method.  This
     force is then applied to point `pd' of `d', and -inverted- to
     point `pg' of `g'.


File: DLdoc.info,  Node: Actuator_tv,  Prev: Actuator_fv,  Up: Actuators

Actuator_tv
-----------

An actuator that applies torques in a given direction:

     class `DL_actuator_tv': public `DL_actuator' {
       void init(DL_dyna*, DL_vector*, DL_geo*);
       void initw(DL_dyna*, DL_vector*, DL_geo*);
     
            DL_actuator_tv();
            ~DL_actuator_tv();
     }

`void DL_actuator_tv::init(DL_dyna *d, DL_vector *rd, DL_geo *g)'
     This method initialised the actuator. The `apply' method will
     calculate a torque in the direction of `rd' in `d' with a
     magnitude of the scalar given as a parameter to the `apply' method.
     This torque is then applied to `d', and -inverted- to `g'.

`void DL_actuator_tv::initw(DL_dyna *d, DL_vector *rd, DL_geo *g)'
     This method does the same as the `init' method above, but now
     vector rd is given in world coordinates (the method will convert
     it to local coordinates).


File: DLdoc.info,  Node: Controllers,  Prev: Actuators,  Up: Miscellaneous classes

Controllers
===========

Controllers are objects that calculate and apply controller forces once
each frame, in contrast to constraints which -within a frame- can
repeatedly improve on the reaction forces and can also `look ahead' at
the results of the application of the forces. As a result of this,
controllers are usually of a `slower', less exact nature than
constraints, but they also take less computational effort. Often a
controller is used in concert with a constraint to regulate the degrees
of freedom that the constraint leaves free.

* Menu:

* Controller::     The generic controller class
* Spring::         The class for modeling springs and dampers
* Torquespring::   The class for modeling rotational springs and dampers
* PID Controller:: The class of PID controllers


File: DLdoc.info,  Node: Controller,  Next: Spring,  Up: Controllers

Controller
----------

The controller class provides a base-class for controllers.  This base
class makes sure that controllers are registered with the dyna system,
and that they indeed are prompted once a frame to calculate and apply
their controller force. The `deactivate' and `activate' methods can be
used to (temporarily) deactivate and reactivate the controller. Only the
controller's descendants should be instantiated.

     class DL_controller : public DL_force_drawable {
       void activate();
       void deactivate();
     
            DL_controller();
            ~DL_controller();
     }

`void DL_controller::activate()'
     This method activates the controller (it is usually automatically
     invoked by the initialization methods of specific controllers, so
     it is usually only used explicitly to reactivate a constraint
     after it has been deactivated.

`void DL_controller::deactivate()'
     this method deactivates the controller: it will not calculate or
     apply controller forces until it is activated again.


File: DLdoc.info,  Node: Spring,  Next: Torquespring,  Prev: Controller,  Up: Controllers

Spring (/damper)
----------------

The spring class is used to model (dampened) springs. As with
connection constraints, upon initialization the two connection-points
should be supplied, optionally with the rest-length of the spring, the
spring constant, and -if required- a damping factor. This class can
also be used to model dampers: in that case a spring constant of zero
and a non-zero damping constant are used.

     class DL_spring : public DL_controller {
       DL_Scalar maxforce;
       DL_Scalar l,c,dc;
       boolean el;
     
       void init(DL_dyna*, DL_point*, DL_geo*, DL_point*);
       void init(DL_dyna*, DL_point*, DL_geo*, DL_point*,DL_Scalar,DL_Scalar);
       void init(DL_dyna*, DL_point*, DL_geo*, DL_point*,DL_Scalar,DL_Scalar,DL_Scalar);
     
       void springforce(DL_vector*);
     
            DL_spring();
            ~DL_spring();
     }

`DL_Scalar DL_spring::maxforce'
     With this attribute, a maximum spring force for the controller can
     be specified: if this maximum force is exceed the controller will
     deactivate itself, so the connection `breaks'. A `maxforce' value
     of zero indicates that there is no limit to the spring force
     magnitude. For a negative `maxforce' value, the spring does not
     deactivate itself when the maxforce magnitude is exceeded, but the
     portion of the force exceeding the maxforce value is not applied.
     The default value for `maxforce' is zero.

`DL_Scalar DL_spring::l'
     This attribute specifies the rest length of the spring (initial
     value: 0)

`DL_Scalar DL_spring::c'
     This attribute specifies the spring constant (initial value: 0)

`DL_Scalar DL_spring::dc'
     This attribute specifies the damping constant (initial value: 0)

`boolean DL_spring::el'
     This attribute specifies if the spring acts like a rubber band: if
     true the spring will only exert pulling forces (no pushing forces
     are applied). The initial value for this attribute is false.

`void DL_spring::init(DL_dyna *d, DL_point *pd, DL_geo *g, DL_point *pg)'
     This method initializes the spring with attachment points `pd' in
     `d', and `pg' in `g' (both points in local coordinates of their
     respective geometries). This method leaves the rest length, and
     the spring and damping constants at their current value.

`void DL_spring::init(DL_dyna *d, DL_point *pd, DL_geo *g, DL_point *pg,'
`                     DL_Scalar l, DL_Scalar c)'
     This method initializes the spring just like the method above, but
     also specifies the new rest length to be `l', and the new spring
     constant to be `c'.

`void DL_spring::init(DL_dyna *d, DL_point *pd, DL_geo *g, DL_point *pg,'
`                     DL_Scalar l, DL_Scalar c, DL_Scalar dc)'
     This method initializes the spring just like the method above, but
     also specifies the new damping constant to be `dc'.

`void DL_spring::springforce(DL_vector *f)'
     This method assigns the most recently calculated spring force to
     `f'.


File: DLdoc.info,  Node: Torquespring,  Next: PID Controller,  Prev: Spring,  Up: Controllers

Torquespring (/damper)
----------------------

The torquespring class is used to model (dampened) rotational springs
that try to enforce a relative orientation of two vectors around a given
axis. Upon initialization the three evctors have to be given, optionally
with the rest-angle of the spring, the spring constant, and -if
required- a damping factor. This class can also be used to model
dampers: in that case a spring constant of zero and a non-zero damping
constant are used.

     class DL_torquespring : public DL_controller {
       DL_Scalar maxtorque;
       DL_Scalar a,c,dc;
     
       void init(DL_dyna*, DL_vector*, DL_vector*, DL_geo*, DL_vector*);
       void init(DL_dyna*, DL_vector*, DL_vector*, DL_geo*, DL_vector*,
                   DL_Scalar,DL_Scalar);
       void init(DL_dyna*, DL_vector*, DL_vector*, DL_geo*, DL_vector*,
                   DL_Scalar,DL_Scalar,DL_Scalar);
     
       void springtorque(DL_vector*);
     
            DL_torquespring();
            ~DL_torquespring();
     }

`DL_Scalar DL_torquespring::maxtorque'
     With this attribute, a maximum spring torque for the controller
     can be specified: if this maximum force is exceed the controller
     will deactivate itself, so the connection `breaks'. A `maxtorque'
     value of zero indicates that there is no limit to the spring torque
     magnitude. For a negative `maxtorque' value, the spring does not
     deactivate itself when the maxtorque magnitude is exceeded, but the
     portion of the torque exceeding the maxtorque value is not
     applied. The default value for `maxtorque' is zero.

`DL_Scalar DL_torquespring::a'
     This attribute specifies the rest angle of the spring (initial
     value: 0)

`DL_Scalar DL_torquespring::c'
     This attribute specifies the spring constant (initial value: 0)

`DL_Scalar DL_torquespring::dc'
     This attribute specifies the damping constant (initial value: 0)

`void DL_torquespring::init(DL_dyna *d, DL_vector *dd, DL_vector *dir,'
`                           DL_geo *g, DL_vector *dg)'
     This method initializes the spring, specifying that the angle is
     to be determined between vector `dd' in `d' and vector `dg' in
     `g', around vector `dir' in `d' (all vectors in local coordinates
     of their respective geometries). This method leaves the rest
     length, and the spring and damping constants at their current
     value.

`void DL_torquespring::init(DL_dyna *d, DL_vector *dd, DL_vector *dir,'
`                           DL_geo *g, DL_vector *dg,'
`                           DL_Scalar a, DL_Scalar c)'
     This method initializes the spring just like the method above, but
     also specifies the new rest angle to be `a', and the new spring
     constant to be `c'.

`void DL_torquespring::init(DL_dyna *d, DL_vector *dd, DL_vector *dir,'
`                           DL_geo *g, DL_vector *dg,'
`                           DL_Scalar a, DL_Scalar c, DL_Scalar dc)'
     This method initializes the spring just like the method above, but
     also specifies the new damping constant to be `dc'.

`void DL_torquespring::springtorque(DL_vector *t)'
     This method assigns the most recently calculated spring torque to
     `t'.


File: DLdoc.info,  Node: PID Controller,  Prev: Torquespring,  Up: Controllers

PID Controller
--------------

The PID controller class is a class of controllers that works in
conjunction with the sensor and actuator classes. It tries to activate
the actuator in such a way that the sensor reading from the sensor
matches a given target signal (which may be varying over time). It does
so by measuring the error between the target value and the sensor value
and steering the actuator proportionally to that error, its integral,
and/or it's derivative.

The PID class can be used in two different ways:
  1. With the sensors and actuators from this class library.
     This method is used when the controller is provided with a
     sensor and an actuator upon contruction. The controller is
     the automatically activated and will start reading its sensor
     and applying its calculates actuator values.

  2. With external means for measuring and applying actuator values.
        This method is used when the controller is not given a sensor
     and       actuator upon contruction. The controller is not
     activated then,       but a user can still call the `sens2act()'
     method each frame       providing the controller with a sensor
     reading and getting the       appropriate actuator value in return.

For example, the `sensor_dist_v' (or `sensor_velo_v') sensor and the
`actuator_fv' actuator can be combined with the PID controller class to
govern the left-over degree of freedom of the prism constraint.  In the
same manner, the `sensor_angle_v' (or `sensor_avelo_v') sensor and the
`actuator_tv' actuator can be combined to control the remaining degree
of freedom of the linehinge constraint.

Here is the PID controller interface:

     class DL_pid : public DL_controller {
       void	init_coefs(DL_Scalar, DL_Scalar, DL_Scalar);
     
       void set_target(DL_Scalar);
       DL_Scalar get_target();
     
       void set_pcoef(DL_Scalar);
       DL_Scalar get_pcoef();
       void set_icoef(DL_Scalar);
       DL_Scalar get_icoef();
       void set_dcoef(DL_Scalar);
       DL_Scalar get_dcoef();
     
       DL_Scalar sens2act(DL_Scalar);
     
                  DL_pid(DL_sensor*, DL_actuator*);
                  DL_pid();
     	     ~DL_pid();
     }

`void DL_pid::init_coefs(DL_Scalar pc, DL_Scalar ic, DL_Scalar dc)'
     This method sets the proportional coefficient to `pc', the
     coefficient for the integrated error to `ic', and the coefficient
     for the derivative of the error to `dc'.

`void DL_pid::set_target(DL_Scalar t)'
     This method sets the current controller target to `t'.

`DL_Scalar DL_pid::get_target()'
     This method returns the current controller target.

`void DL_pid::set_pcoef(DL_Scalar pc)'
     This method sets the proportional coefficient to `pc'.

`DL_Scalar DL_pid::get_pcoef()'
     This methods returns the current proportional coefficient.

`void DL_pid::set_icoef(DL_Scalar ic)'
     This method sets the coefficient for the integrated error to `ic'.

`DL_Scalar DL_pid::get_icoef()'
     This methods returns the current coefficient for the integrated
     error.

`void DL_pid::set_dcoef(DL_Scalar dc)'
     This method sets the coefficient for the derivative of the error
     to `dc'.

`DL_Scalar DL_pid::get_dcoef()'
     This methods returns the current coefficient for the derivative of
     the error.

`DL_Scalar sens2act(DL_Scalar)'
     This method returns the actuator value for the given sensor reading
     (to be called each frame when no sensor and actuator were provided
     to the controller at construction time.


